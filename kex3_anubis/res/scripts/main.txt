#include "scripts/actorTypes.txt"

void main(void)
{
}

//
// A_RandomVaseItem
//

void A_RandomVaseItem(kActor @actor)
{
    int r = Math::Rand() & 7;
    float x = actor.Origin().x;
    float y = actor.Origin().y;
    float z = actor.Origin().z + actor.Height();
    
    switch(r)
    {
    case 1:
    case 3:
    case 6:
        Game.SpawnActor("Fx_AmmoSpawn", x, y, z, 0, actor.SectorIndex());
        break;
        
    case 4:
    case 5:
        Game.SpawnActor("Fx_HealthSpawn", x, y, z, 0, actor.SectorIndex());
        break;
    }
}

//
// A_SpawnOrbPickup
//

void A_SpawnOrbPickup(kActor @actor)
{
    kActor @orb;
    float x = actor.Origin().x;
    float y = actor.Origin().y;
    float z = actor.Origin().z;
    
    switch(actor.Type())
    {
    case AT_MISC20: // Fx_HealthSpawn
        @orb = Game.SpawnActor("Item_Health", x, y, z, 0, actor.SectorIndex());
        break;
        
    case AT_MISC21: // Fx_AmmoSpawn
        @orb = Game.SpawnActor("Item_Ammo", x, y, z, 0, actor.SectorIndex());
        break;
        
    default:
        return;
    }
    
    if(orb is null)
    {
        return;
    }
    
    if((Math::Rand() & 2) == 0)
    {
        orb.Scale() = 2.0f;
    }
}

//
// A_ThrowAmunBomb
//

float bombChargeThrow = 16.0f;

void A_ThrowAmunBomb(kActor @actor)
{
    float cp = Math::Cos(actor.Pitch());
    float x = actor.Origin().x;
    float y = actor.Origin().y;
    float z = actor.Origin().z + 64.0f;
    kVec3 dir;
    kActor @bomb;
    
    dir.x = Math::Sin(actor.Yaw()) * cp;
    dir.y = Math::Cos(actor.Yaw()) * cp;
    dir.z = -Math::Sin(actor.Pitch());
    
    x += dir.x * actor.Radius();
    y += dir.y * actor.Radius();
    z += dir.z * actor.Radius();
    
    @bomb = Game.SpawnActor("Proj_AmunBomb", x, y, z, actor.Yaw(), actor.SectorIndex());
    
    if(bomb is null)
    {
        return;
    }
    
    bomb.Velocity() = (dir * bombChargeThrow);
    bomb.Velocity().z = 8.0f + ((bombChargeThrow + 8.0f) * dir.z);
    
    bombChargeThrow = 16.0f;
}

//
// A_ChargeBombThrow
//

void A_ChargeBombThrow(kActor @actor)
{
    bombChargeThrow += 0.2f;
    
    if(bombChargeThrow > 40.0f)
    {
        bombChargeThrow = 40.0f;
    }
}

//
// A_AnubisDeath
//

void A_AnubisDeath(kActor @actor)
{
    float x = actor.Origin().x;
    float y = actor.Origin().y;
    float z = actor.Origin().z + 64.0f;
    kActor @gib = Game.SpawnActor("Fx_Gibs01", x, y, z, actor.Yaw(), actor.SectorIndex());
    
    if(!(gib is null))
    {
        gib.Scale() = actor.Scale();
    }
    
    if((Math::Rand() & 1) == 0)
    {
        actor.PlaySound("sounds/anubisdeath01.wav");
    }
    else
    {
        actor.PlaySound("sounds/anubisdeath02.wav");
    }
}

//
// A_SpiderLeap
//

void A_SpiderLeap(kActor @actor)
{
    if(actor.GetTarget() is null)
    {
        return;
    }
    
    kVec3 dir = (actor.GetTarget().Origin() - actor.Origin()).Normalize();
    
    actor.PlaySound("sounds/spidjump.wav");
    
    actor.Velocity().x = dir.x * 4;
    actor.Velocity().y = dir.y * 4;
    actor.Velocity().z = 15.0f;
}

//
// A_SpiderCheckGround
//

void A_SpiderCheckGround(kActor @actor)
{
    if((actor.Origin().z + actor.Velocity().z) <= actor.FloorHeight())
    {
        actor.ChangeAnim("monsters/spider_base");
    }
}

//
// A_SpiderDeath
//

void A_SpiderDeath(kActor @actor)
{
    float x = actor.Origin().x;
    float y = actor.Origin().y;
    float z = actor.Origin().z;
    kActor @gib = Game.SpawnActor("Fx_Gibs01", x, y, z, actor.Yaw(), actor.SectorIndex());
    
    if(!(gib is null))
    {
        gib.Scale() = actor.Scale();
    }
    
    actor.PlaySound("sounds/spiddeath.wav");
}
