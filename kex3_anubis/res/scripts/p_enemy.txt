//
// Copyright(C) 2014-2015 Samuel Villarreal
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//      AI/Monster Actions
//

//
// A_ThrustZVelocity
//

void A_ThrustZVelocity(kActor @actor, const float speed)
{
    actor.Velocity().z = speed;
}

//
// A_GibDeath
//

void A_GibDeath(kActor @actor, const float offset)
{
    float x = actor.Origin().x;
    float y = actor.Origin().y;
    float z = actor.Origin().z + offset;
    kActor @gib = Game.SpawnActor("Fx_Gibs01", x, y, z, actor.Yaw(), actor.SectorIndex());
    
    if(!(gib is null))
    {
        gib.Scale() = actor.Scale();
    }
}

//
// A_AnubisDeath
//

void A_AnubisDeath(kActor @actor)
{
    if((Math::Rand() & 1) == 0)
    {
        actor.PlaySound("sounds/anubisdeath01.wav");
    }
    else
    {
        actor.PlaySound("sounds/anubisdeath02.wav");
    }
}

//
// A_SpiderLeap
//

void A_SpiderLeap(kActor @actor)
{
    if(actor.GetTarget() is null)
    {
        return;
    }
    
    kVec3 dir = (actor.GetTarget().Origin() - actor.Origin()).Normalize();
    
    actor.PlaySound("sounds/spidjump.wav");
    
    actor.Velocity().x = dir.x * 4;
    actor.Velocity().y = dir.y * 4;
    actor.Velocity().z = 15.0f;
}

//
// A_SpiderCheckGround
//

void A_SpiderCheckGround(kActor @actor)
{
    if((actor.Origin().z + actor.Velocity().z) <= actor.FloorHeight()+1.024f)
    {
        actor.ChangeAnim("monsters/spider_base");
    }
}

//
// A_WaspDeath
//

void A_WaspDeath(kActor @actor)
{
    if((Math::Rand() & 1) == 0)
    {
        actor.PlaySound("sounds/waspdeath01.wav");
    }
    else
    {
        actor.PlaySound("sounds/waspdeath02.wav");
    }
}

//
// A_BirdDeath
//

void A_BirdDeath(kActor @actor)
{
    float x = actor.Origin().x;
    float y = actor.Origin().y;
    float z = actor.Origin().z;
    
    for(int i = 0; i < 7; ++i)
    {
        float ix = x + (Math::RandCFloat() * 64);
        float iy = y + (Math::RandCFloat() * 64);
        float iz = z + (Math::RandCFloat() * 16);
        
        Game.SpawnActor("Obj_Bird_Feathers", ix, iy, iz, 0, actor.SectorIndex());
    }
}

//
// A_FeatherDrop
//

void A_FeatherDrop(kActor @actor)
{
    if((actor.Origin().z + actor.Velocity().z) <= actor.FloorHeight()+1.024f)
    {
        actor.Remove();
    }
}

//
// A_BirdWander
//

void A_BirdWander(kActor @actor)
{
    if((actor.GameTicks() & 512) != 0)
    {
        actor.Yaw() += Math::Deg2Rad(1.5f);
    }
    else
    {
        actor.Yaw() -= Math::Deg2Rad(1.5f);
    }
    
    actor.Velocity().x = Math::Sin(actor.Yaw()) * 2.0f;
    actor.Velocity().y = Math::Cos(actor.Yaw()) * 2.0f;
}

//
// A_BirdRetreat
//

void A_BirdRetreat(kActor @actor)
{
    float minHeight;
    
    actor.Yaw() += Math::Deg2Rad(4.0f);
    
    actor.Velocity().x = Math::Sin(actor.Yaw()) * 4.0f;
    actor.Velocity().y = Math::Cos(actor.Yaw()) * 4.0f;
    
    minHeight = (actor.CeilingHeight() - actor.Height()) - 1.024f;
    
    if(actor.Velocity().z < 3.0f || (actor.Origin().z + actor.Velocity().z) >= minHeight)
    {
        actor.ChangeAnim("monsters/bird_fly_calm");
        actor.Velocity().Clear();
        actor.SetTarget(null);
    }
}
