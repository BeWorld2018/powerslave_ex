//
// Copyright(C) 2014-2015 Samuel Villarreal
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//      AI/Monster Actions
//

//
// A_ThrustZVelocity
//

void A_ThrustZVelocity(kActor @actor, const float speed)
{
    actor.Velocity().z = speed;
}

//
// A_GibDeath
//

void A_GibDeath(kActor @actor, const float offset)
{
    float x = actor.Origin().x;
    float y = actor.Origin().y;
    float z = actor.Origin().z + offset;
    kActor @gib = Game.SpawnActor("Fx_Gibs01", x, y, z, actor.Yaw(), actor.SectorIndex());
    
    if(!(gib is null))
    {
        gib.Scale() = actor.Scale();
    }
}

//
// A_Hide
//

void A_Hide(kActor @actor)
{
    actor.Flags() |= AF_HIDDEN;
}

//
// A_Show
//

void A_Show(kActor @actor)
{
    actor.Flags() &= ~AF_HIDDEN;
}

//
// A_AnubisDeath
//

void A_AnubisDeath(kActor @actor)
{
    if((Math::Rand() & 1) == 0)
    {
        actor.PlaySound("sounds/anubisdeath01.wav");
    }
    else
    {
        actor.PlaySound("sounds/anubisdeath02.wav");
    }
}

//
// A_SpiderLeap
//

void A_SpiderLeap(kActor @actor)
{
    if(actor.GetTarget() is null)
    {
        return;
    }
    
    kVec3 dir = (actor.GetTarget().Origin() - actor.Origin()).Normalize();
    
    actor.PlaySound("sounds/spidjump.wav");
    
    actor.Velocity().x = dir.x * 4;
    actor.Velocity().y = dir.y * 4;
    actor.Velocity().z = 15.0f;
}

//
// A_SpiderCheckGround
//

void A_SpiderCheckGround(kActor @actor)
{
    if((actor.Origin().z + actor.Velocity().z) <= actor.FloorHeight()+1.024f)
    {
        actor.ChangeAnim("monsters/spider_base");
    }
}

//
// A_WaspDeath
//

void A_WaspDeath(kActor @actor)
{
    if((Math::Rand() & 1) == 0)
    {
        actor.PlaySound("sounds/waspdeath01.wav");
    }
    else
    {
        actor.PlaySound("sounds/waspdeath02.wav");
    }
}

//
// A_BirdDeath
//

void A_BirdDeath(kActor @actor)
{
    float x = actor.Origin().x;
    float y = actor.Origin().y;
    float z = actor.Origin().z;
    
    for(int i = 0; i < 7; ++i)
    {
        float ix = x + (Math::RandCFloat() * 64);
        float iy = y + (Math::RandCFloat() * 64);
        float iz = z + (Math::RandCFloat() * 16);
        
        Game.SpawnActor("Obj_Bird_Feathers", ix, iy, iz, 0, actor.SectorIndex());
    }
}

//
// A_FeatherDrop
//

void A_FeatherDrop(kActor @actor)
{
    if((actor.Origin().z + actor.Velocity().z) <= actor.FloorHeight()+1.024f)
    {
        actor.Remove();
    }
}

//
// A_BirdWander
//

void A_BirdWander(kActor @actor)
{
    if((actor.GameTicks() & 512) != 0)
    {
        actor.Yaw() += Math::Deg2Rad(1.5f);
    }
    else
    {
        actor.Yaw() -= Math::Deg2Rad(1.5f);
    }
    
    actor.Velocity().x = Math::Sin(actor.Yaw()) * 2.0f;
    actor.Velocity().y = Math::Cos(actor.Yaw()) * 2.0f;
}

//
// A_BirdRetreat
//

void A_BirdRetreat(kActor @actor)
{
    float minHeight;
    
    actor.Yaw() += Math::Deg2Rad(4.0f);
    
    actor.Velocity().x = Math::Sin(actor.Yaw()) * 4.0f;
    actor.Velocity().y = Math::Cos(actor.Yaw()) * 4.0f;
    
    minHeight = (actor.CeilingHeight() - actor.Height()) - 1.024f;
    
    if(actor.Velocity().z < 3.0f || (actor.Origin().z + actor.Velocity().z) >= minHeight)
    {
        actor.ChangeAnim("monsters/bird_fly_calm");
        actor.Velocity().Clear();
        actor.SetTarget(null);
    }
}

//
// A_MummyDeath
//

void A_MummyDeath(kActor @actor)
{
    switch(Math::RandMax(3))
    {
    case 0:
        actor.PlaySound("sounds/mumdeath01.wav");
        break;
    case 1:
        actor.PlaySound("sounds/mumdeath02.wav");
        break;
    case 2:
        actor.PlaySound("sounds/mumdeath03.wav");
        break;
    }
}

//
// A_SetupRedCobraJoints
//

void A_SetupRedCobraJoints(kActor @actor)
{
    float x = actor.Origin().x;
    float y = actor.Origin().y;
    float z = actor.Origin().z;
    kActor @j1;
    kActor @j2;
    kActor @j3;
    kActor @j4;
    kActor @j5;
    
    @j1 = Game.SpawnActor("Fx_RedCobraJoint", x, y, z, 0, actor.SectorIndex());
    @j2 = Game.SpawnActor("Fx_RedCobraJoint", x, y, z, 0, actor.SectorIndex());
    @j3 = Game.SpawnActor("Fx_RedCobraJoint", x, y, z, 0, actor.SectorIndex());
    @j4 = Game.SpawnActor("Fx_RedCobraJoint", x, y, z, 0, actor.SectorIndex());
    @j5 = Game.SpawnActor("Fx_RedCobraJoint", x, y, z, 0, actor.SectorIndex());
    
    j1.SetTarget(actor);
    j2.SetTarget(j1);
    j3.SetTarget(j2);
    j4.SetTarget(j3);
    j5.SetTarget(j4);
    
    j2.Scale() = 0.875f;
    j3.Scale() = 0.75f;
    j4.Scale() = 0.625f;
    j5.Scale() = 0.5f;
    
    actor.SetTaggedActor(j5);
}

//
// A_RedCobraExplode
//

void A_RedCobraExplode(kActor @actor)
{
    float x = actor.Origin().x + (Math::RandCFloat() * 32.0f);
    float y = actor.Origin().y + (Math::RandCFloat() * 32.0f);
    float z = actor.Origin().z + (Math::RandCFloat() * 32.0f);
    kActor @puff;
    
    @puff = Game.SpawnActor("Fx_RedCobraExplode", x, y, z, 0, actor.SectorIndex());
    
    if(puff is null)
    {
        return;
    }
    
    puff.PlaySound("sounds/pbexplode.wav");
}

//
// A_BastetTryTeleport
//

void A_BastetTryTeleport(kActor @actor)
{
    if(actor.GetTarget() is null)
    {
        return;
    }
    
    if((actor.Flags() & AF_HIDDEN) != 0)
    {
        A_BastetTryTeleportIn(actor);
        return;
    }
    
    if(Math::RandMax(1024) < 1020)
    {
        return;
    }
    
    actor.Velocity().Clear();
    actor.StepHeight() = 64.0f;
    actor.Flags() &= ~(AF_SOLID|AF_SHOOTABLE);
    actor.ChangeAnim("monsters/bastet_teleport_out");
}

//
// A_BastetPainTeleport
//

void A_BastetPainTeleport(kActor @actor)
{
    if(actor.GetTarget() is null)
    {
        return;
    }
    
    if((actor.Flags() & AF_HIDDEN) != 0)
    {
        A_BastetTryTeleportIn(actor);
        return;
    }
    
    if((Math::Rand() & 3) != 0)
    {
        return;
    }
    
    actor.Velocity().Clear();
    actor.StepHeight() = 64.0f;
    actor.Flags() &= ~(AF_SOLID|AF_SHOOTABLE);
    actor.ChangeAnim("monsters/bastet_teleport_out");
}

//
// A_BastetTryTeleportIn
//

void A_BastetTryTeleportIn(kActor @actor)
{
    if(Math::Rand() < 32600)
    {
        return;
    }
    
    actor.ChangeAnim("monsters/bastet_teleport_in");
}

//
// A_BastetCheckTeleport
//

void A_BastetCheckTeleport(kActor @actor)
{
    if((actor.Flags() & AF_HIDDEN) == 0)
    {
        if(Math::RandMax(256) >= 248)
        {
            actor.ChangeAnim("monsters/bastet_teleport_in");
        }
        return;
    }
    
    actor.ChangeAnim("monsters/bastet_chase");
}

//
// A_BastetTeleportIn
//

void A_BastetTeleportIn(kActor @actor)
{
    actor.Flags() |= (AF_SOLID|AF_SHOOTABLE);
    actor.StepHeight() = 48.0f;
}

//
// A_BastetScream
//

void A_BastetScream(kActor @actor)
{
    if((Math::Rand() & 1) == 0)
    {
        actor.PlaySound("sounds/bastetpain01.wav");
    }
    else
    {
        actor.PlaySound("sounds/bastetpain02.wav");
    }
}

//
// A_SentryChatter
//

void A_SentryChatter(kActor @actor)
{
    if(Math::RandFloat() < 0.95f)
    {
        return;
    }
    
    switch(Math::RandMax(3))
    {
    case 0:
        actor.PlaySound("sounds/mantisact02.wav");
        break;
    case 1:
        actor.PlaySound("sounds/mantisact03.wav");
        break;
    case 2:
        actor.PlaySound("sounds/mantisact04.wav");
        break;
    }
}

//
// A_SentryDeath
//

void A_SentryDeath(kActor @actor)
{
    if((Math::Rand() & 1) == 0)
    {
        actor.PlaySound("sounds/mantisdeath01.wav");
    }
    else
    {
        actor.PlaySound("sounds/mantisdeath02.wav");
    }
}
